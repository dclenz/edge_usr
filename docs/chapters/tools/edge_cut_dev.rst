EDGEcut
==========

This is the developer guide for EDGEcut.  The goal of this document is to
describe some of the more intricate details of EDGEcut, extra documentation for
CGAL routines, potential pitfalls, and anything else that didn't fit in the user
guide.

This guide should **not** be considered exhaustive by any means.

For more general usage and building instructions, check out the
`EDGEcut User Guide <https://edge-usr.readthedocs.io/en/develop/chapters/tools/edge_cut.html/>`_.


Overview
----------
The purpose of EDGEcut is to generate 3D surface meshes for regions bounded on
one side by a topographical profile. These surface meshes can be used in
conjunction with another meshing tool (such as gmsh) in order to create a 3D
tetrahedral mesh for use in EDGE.

EDGEcut has been designed to provide the following functionality, features 5
and 6 are not yet implemented.

  1. Create a surface mesh representing a topographical surface.
  2. Create a separate surface mesh which, together with the topography mesh, forms a
     closed conformal mesh bounding a rectilinear region below the Earth's
     surface.
  3. Allow the size and quality of the mesh facets to be set by the user at
     run-time.
  4. Allow the size and quality of the mesh facets to vary
     throughout the domain in a user-controlled way.
  5. Allow the user to specify the shape of the "underground" region to be any
     (reasonable) shape.
  6. Allow the user to specify a model of the surface of a seismic fault, and
     create a new surface mesh which:

      * Approximates well the original fault model
      * Is conformal with respect to the topography mesh and boundary mesh
      * Is contained entirely with the volume bounded by the topography and
        boundary meshes
      * Has its facet size and quality determined by the user at run-time


.. NOTE::
  We define a "3D surface mesh" to be a collection of triangles with vertices
  in 3-space such that the triangles only intersect on edges or vertices.
  Mathematically, we mean a pure simplicial 2-complex embedded in R^3. As such,
  a surface mesh is a 2-dimensional piece-wise linear surface in R^3.  A surface
  mesh is not necessarily a manifold surface and may or may not bound a volume.

  In this guide a 3D surface mesh will often be referred to as a "surface mesh"
  or just a "mesh." If any other type of mesh is discussed, it will be clear
  from the context.

Program Logic
--------------
The program logic of EDGEcut can be broken into several distinct tasks


Mesher
---------
EDGEcut uses the meshing algorithm in the `CGAL Mesh_3 Package <https://doc.cgal.org/latest/Mesh_3/index.html/>`_.
The mesher takes two arguments, a *domain* and a set of *criteria*.

.. NOTE::
  CGAL provides a specialized surface meshing package called
  `3D Surface Mesh Generation <https://doc.cgal.org/latest/Surface_mesher/index.html/>`_.
  However, it appears that the functionality of this package is being merged into
  Mesh_3 and that little to no future development is planned for this package:
  `see here <https://github.com/CGAL/cgal/issues/3237/>`_.

Mesh Domain
^^^^^^^^^^^^
Roughly speaking, a `mesh domain <https://doc.cgal.org/latest/Mesh_3/classMeshDomain__3.html/>`_
in CGAL is comprised of two things: a representation of a geometric object, and
an optional list of "features". A feature is a point or line segment which is
somehow important to the overall geometry of the domain. Any features in the
mesh domain are guaranteed to be present in any approximation generated by the
mesher.

The geometric object intrinsic to a mesh domain can be represented in several
ways. EDGEcut represents them as `polyhedral surfaces <https://doc.cgal.org/latest/Polyhedron/index.html/>`_.
The CGAL class `Polyhedron_3 <https://doc.cgal.org/latest/Polyhedron/classCGAL_1_1Polyhedron__3.html/>`_
is the general implementation of a polyhedral surface; however, EDGEcut uses the
customized class `Mesh_polyhedron_3 <https://doc.cgal.org/latest/Mesh_3/classCGAL_1_1Polyhedral__mesh__domain__3.html/>`_,
which is designed to interface with the mesher.

Typically, when the mesher encounters a polyhedral surface, it expects a domain consisting of a closed
polyhedral surface as well as a non-closed polyhedral surface which exists inside
the volume bounded by the closed surface. It then proceeds to generate a 3D *volume*
mesh of tetrahedra which fills the entire bounded volume. EDGEcut does not do
volume mesh generation, so we use a different approach.

To force the mesher to do only surface meshing, domain constructed from a vector
of non-closed polyhedral surfaces. In our case, we only have one surface to mesh,
so we pass a vector with one polyhedral surface. `This example <https://doc.cgal.org/latest/Mesh_3/Mesh_3_2remesh_polyhedral_surface_8cpp-example.html/>`_
shows how to do this in practice.

.. NOTE::
  One of the main reasons that EDGEcut uses


Mesh Criteria
^^^^^^^^^^^^^^



there is a tag that can be passed to mesher to ensure manifold

lloyd and odt are global optimizers so don't preserve manifold-ness
